// netlify/functions/webhook.js

const { Client } = require("pg");
const fetch = global.fetch || require("node-fetch");

// –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø—Ü–∏–π –ø–æ poll_id
const inMemoryCache = {};  // { [pollId]: { question: string, options: string[] } }

// HTTP-–∫–æ–¥ 405
const METHOD_NOT_ALLOWED = { statusCode: 405, body: "Method Not Allowed" };

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–ø—Ä–æ—Å—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç inMemoryCache
async function sendFeedbackPolls(chatId) {
    const polls = [
        {
            question: "How relevant and valuable do you find our innovative approach?\n1 ‚Äî not valuable at all, 5 ‚Äî very valuable\n\n"
                + "–ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏ —Ü–µ–Ω–Ω—ã–º –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞—à –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥?\n1 ‚Äî —Å–æ–≤—Å–µ–º –Ω–µ —Ü–µ–Ω–Ω–æ, 5 ‚Äî –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ",
            options: ["1", "2", "3", "4", "5"],
        },
        {
            question: "How intuitive does the app seem for creating and joining events?\n1 ‚Äî not intuitive at all, 5 ‚Äî completely clear\n\n"
                + "–ù–∞—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –∫–∞–∂–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–æ–±—ã—Ç–∏—è–º?\n1 ‚Äî —Å–æ–≤—Å–µ–º –Ω–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ, 5 ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ",
            options: ["1", "2", "3", "4", "5"],
        },
        {
            question: "How likely are you to recommend the app to your classmates?\n1 ‚Äî not likely at all, 5 ‚Äî extremely likely\n\n"
                + "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–∏–º –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º?\n1 ‚Äî —Å–æ–≤—Å–µ–º –Ω–µ –≤–µ—Ä–æ—è—Ç–Ω–æ, 5 ‚Äî –∫—Ä–∞–π–Ω–µ –≤–µ—Ä–æ—è—Ç–Ω–æ",
            options: ["1", "2", "3", "4", "5"],
        },
    ];

    for (const { question, options } of polls) {
        const resp = await fetch(
            `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendPoll`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: chatId,
                    question,
                    options,
                    is_anonymous: false,
                    allows_multiple_answers: false,
                    type: "regular",
                }),
            }
        );
        const body = await resp.json();
        if (body.ok && body.result.poll) {
            const poll = body.result.poll;
            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ RAM: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            inMemoryCache[poll.id] = {
                question: poll.question,
                options: poll.options.map(o => o.text),
            };
        }
    }
}

exports.handler = async function (event) {
    if (event.httpMethod !== "POST") {
        return METHOD_NOT_ALLOWED;
    }

    let update;
    try {
        update = JSON.parse(event.body);
    } catch {
        return { statusCode: 400, body: "Bad Request" };
    }

    // 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ poll_answer (—Å–∞–±–º–∏—Ç —Ñ–∏–¥–±–µ–∫–∞)
    if (update.poll_answer) {
        const { poll_id: pollId, option_ids: optionIds, user } = update.poll_answer;
        const alias = user.username || null;
        const chatId = user.id;

        // –ø–æ–ª—É—á–∞–µ–º –∏–∑ RAM
        const pollData = inMemoryCache[pollId];
        if (!pollData) {
            // —Ç–∞–π–º–∞—É—Ç: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å—ã
            await fetch(
                `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ chat_id: chatId, text: "‚è∞ Feedback session timed out. Please re-submit your feedback." }),
                }
            );
            await sendFeedbackPolls(chatId);
            return { statusCode: 200, body: JSON.stringify({ status: "timeout" }) };
        }

        const question = pollData.question;
        const answer = optionIds.map(i => pollData.options[i]).join(", ");
        // —É–¥–∞–ª—è–µ–º –∏–∑ RAM
        delete inMemoryCache[pollId];

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç
        const client = new Client({ connectionString: process.env.NEON_DATABASE_URL.trim(), ssl: { rejectUnauthorized: false } });
        try {
            await client.connect();
            await client.query(`
        CREATE TABLE IF NOT EXISTS feedback (
          id          SERIAL PRIMARY KEY,
          alias       TEXT,
          question    TEXT   NOT NULL,
          answer      TEXT   NOT NULL,
          created_at  TIMESTAMPTZ DEFAULT now()
        );
      `);
            await client.query(
                `INSERT INTO feedback(alias, question, answer) VALUES($1, $2, $3)`,
                [alias, question, answer]
            );
            if (process.env.FEEDBACK_WEBHOOK_URL) {
                await fetch(process.env.FEEDBACK_WEBHOOK_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ alias, question, answer }),
                });
            }
            await client.end();
            return { statusCode: 200, body: JSON.stringify({ status: "ok" }) };
        } catch (err) {
            console.error("Feedback handler error:", err);
            await client.end();
            return { statusCode: 502, body: "Bad Gateway: " + err.message };
        }
    }

    // 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message) {
        const msg = update.message;
        if (!msg.from?.username) {
            return { statusCode: 200, body: "No username, skipping" };
        }
        const alias = msg.from.username;
        const chatId = msg.chat.id;

        // /start, /help
        if (msg.text === "/start" || msg.text === "/help") {
            const client = new Client({ connectionString: process.env.NEON_DATABASE_URL.trim(), ssl: { rejectUnauthorized: false } });
            try {
                await client.connect();
                await client.query(`CREATE TABLE IF NOT EXISTS users (alias TEXT PRIMARY KEY, chat_id BIGINT NOT NULL);`);
                await client.query(
                    `INSERT INTO users(alias, chat_id) VALUES($1, $2) ON CONFLICT(alias) DO UPDATE SET chat_id = EXCLUDED.chat_id`,
                    [alias, chatId]
                );
            } catch (err) {
                console.error("DB error in registration:", err);
            } finally {
                await client.end();
            }
            await fetch(
                `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        chat_id: chatId,
                        parse_mode: "HTML",
                        text: `üëã Hello, ${alias}\nüéì Welcome to IU Alumap...`,
                    }),
                }
            );
            return { statusCode: 200, body: "ok" };
        }

        // /leave_feedback
        if (msg.text === "/leave_feedback") {
            await sendFeedbackPolls(chatId);
            return { statusCode: 200, body: "ok" };
        }

        // /launch_app
        if (msg.text === "/launch_app") {
            const webAppUrl = "https://iualumni.netlify.app/";
            await fetch(
                `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ chat_id: chatId, text: "üì± –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ Mini App:", reply_markup: { inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏", web_app: { url: webAppUrl } }]] } }),
                }
            );
            return { statusCode: 200, body: "ok" };
        }

        return { statusCode: 200, body: "Not a recognized command, skipping" };
    }

    return { statusCode: 200, body: "No handler for this update type" };
};
